#!/usr/bin/env python3
# filepath: /home/lzq/workspace/gan_seg/av2/downloadav2.py

import subprocess
import os
from pathlib import Path

def get_s3_directory_structure():
    """
    获取Argoverse 2 sensor数据集的目录结构并保存到txt文件
    """
    
    # 设置参数
    dataset_name = "sensor"
    s3_path = f"s3://argoverse/datasets/av2/{dataset_name}/"
    output_file = Path(__file__).parent / f"av2_{dataset_name}_structure.txt"
    
    print(f"正在获取 {s3_path} 的目录结构...")
    print(f"输出文件: {output_file}")
    
    try:
        # 使用s5cmd列出目录结构
        cmd = ["s5cmd", "--no-sign-request", "ls", s3_path]
        print(f"执行命令: {' '.join(cmd)}")
        
        # 执行命令并捕获输出
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            # 保存到文件
            with open(output_file, 'w') as f:
                f.write(f"Argoverse 2 {dataset_name} Dataset Directory Structure\n")
                f.write("=" * 60 + "\n")
                f.write(f"S3 Path: {s3_path}\n")
                f.write(f"Generated by: {__file__}\n")
                f.write("=" * 60 + "\n\n")
                f.write(result.stdout)
            
            print(f"✓ 目录结构已保存到: {output_file}")
            print(f"找到 {len(result.stdout.splitlines())} 个条目")
            
            # 显示前几行预览
            lines = result.stdout.strip().split('\n')
            print("\n--- 目录结构预览 (前10行) ---")
            for i, line in enumerate(lines[:10]):
                print(f"{i+1:2d}: {line}")
            if len(lines) > 10:
                print(f"... 还有 {len(lines) - 10} 行")
                
        else:
            print(f"✗ 命令执行失败:")
            print(f"错误代码: {result.returncode}")
            print(f"错误信息: {result.stderr}")
            
    except subprocess.TimeoutExpired:
        print("✗ 命令执行超时 (5分钟)")
    except FileNotFoundError:
        print("✗ s5cmd 未找到，请先安装 s5cmd")
        print("安装方法:")
        print("  方法1: go install github.com/peak/s5cmd/v2@latest")
        print("  方法2: wget https://github.com/peak/s5cmd/releases/download/v2.2.2/s5cmd_2.2.2_Linux-64bit.tar.gz")
    except Exception as e:
        print(f"✗ 发生错误: {e}")

def get_recursive_structure():
    """
    获取递归的目录结构（更详细）
    """
    dataset_name = "sensor"
    s3_path = f"s3://argoverse/datasets/av2/{dataset_name}/"
    output_file = Path(__file__).parent / f"av2_{dataset_name}_structure_recursive.txt"
    
    print(f"\n正在获取递归目录结构...")
    
    try:
        # 使用递归列出
        cmd = ["s5cmd", "--no-sign-request", "ls", "--recursive", s3_path]
        print(f"执行命令: {' '.join(cmd)}")
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
        
        if result.returncode == 0:
            with open(output_file, 'w') as f:
                f.write(f"Argoverse 2 {dataset_name} Dataset Recursive Structure\n")
                f.write("=" * 60 + "\n")
                f.write(f"S3 Path: {s3_path}\n")
                f.write("=" * 60 + "\n\n")
                f.write(result.stdout)
            
            print(f"✓ 递归目录结构已保存到: {output_file}")
            
            # 统计信息
            lines = result.stdout.strip().split('\n')
            total_files = len([line for line in lines if line.strip() and not line.endswith('/')])
            total_dirs = len([line for line in lines if line.strip() and line.endswith('/')])
            
            print(f"统计: {total_dirs} 个目录, {total_files} 个文件")
            
        else:
            print(f"✗ 递归列举失败: {result.stderr}")
            
    except subprocess.TimeoutExpired:
        print("✗ 递归列举超时 (10分钟)")
    except Exception as e:
        print(f"✗ 递归列举错误: {e}")

def main():
    """
    主函数
    """
    print("Argoverse 2 数据集目录结构获取工具")
    print("=" * 50)
    
    # 创建输出目录
    output_dir = Path(__file__).parent
    output_dir.mkdir(exist_ok=True)
    
    # 检查s5cmd是否安装
    try:
        subprocess.run(["s5cmd", "version"], capture_output=True, check=True)
        print("✓ s5cmd 已安装")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("✗ s5cmd 未安装或无法运行")
        return
    
    # 获取基本目录结构
    get_s3_directory_structure()
    
    # 询问是否获取递归结构
    while True:
        choice = input("\n是否获取递归目录结构？(这可能需要更长时间) [y/n]: ").lower().strip()
        if choice in ['y', 'yes']:
            get_recursive_structure()
            break
        elif choice in ['n', 'no']:
            print("跳过递归目录结构获取")
            break
        else:
            print("请输入 y 或 n")

if __name__ == "__main__":
    main()